syntax = "proto3";

package LLVM.TDG;

enum StreamStepPattern {
  UNKNOWN = 0;
  UNCONDITIONAL = 1;
  CONDITIONAL = 2;
  NEVER = 3;
}

enum StreamValuePattern {
  RANDOM = 0;
  CONSTANT = 1;
  LINEAR = 2;
  QUARDRIC = 3;
  INDIRECT = 4;
  POINTER_CHASE = 5;
  PREV_LOAD = 6;
  REDUCTION = 7;
}

enum DataType {
  UNKNOWN_TYPE = 0;
  INTEGER = 1;
  FLOAT = 2;
  DOUBLE = 3;
  VECTOR_128 = 4;
  VECTOR_256 = 5;
  VECTOR_512 = 6;
  VOID = 7;
  INT1 = 8;
  INT32_INT1 = 9;
  TILE_1kB = 10;
}

message StreamParam {
  int64 value = 1;
  bool is_static = 2;
}

// Pattern describe the induction variable.
message IVPattern {
  StreamValuePattern val_pattern = 1;
  repeated StreamParam params = 2;
}

// Describe the static coalesce information.
message StaticCoalesceInfo {
  uint64 base_stream = 1;
  int32 offset = 2;
}

message StreamId {
  string name = 1;
  uint64 id = 2;
}

message PredicatedStreamId {
  StreamId id = 1;
  bool pred_true = 2;
  int32 pred_dg_id = 3;
}

message ExecFuncInfo {
  string name = 1;
  message FuncArg {
    bool is_stream = 1;
    uint64 stream_id = 2;
    DataType type = 3;
  }
  repeated FuncArg args = 2;
  DataType type = 3;
  /**
   * Whether this function is just some simple computation.
   * Mainly used for distributed reduction.
   */
  ComputeOp compute_op = 4;
  enum ComputeOp {
    UNKNOWN = 0;
    FLOAT_ADD = 1;
    INT_ADD = 2;
  }
}

message StaticStreamComputeInfo {
  StreamId update_stream = 1; // Update relationship.
  ExecFuncInfo store_func_info = 2; // Store func for update/store/atomic stream.
  bool enabled_store_func = 3; // The store func is enabled.
  ExecFuncInfo load_func_info = 4; // Load func for load/atomic stream.
  bool enabled_load_func = 5; // The load func is enabled.
  // Value dependence.
  repeated StreamId value_base_streams = 6;
  repeated StreamId value_dep_streams = 7;
  // This stream reduce from 0.
  bool reduce_from_zero = 16;
}

message StaticStreamInfo {
  bool is_candidate = 1;
  bool is_qualified = 2;
  bool is_chosen = 3;
  StreamStepPattern stp_pattern = 4;
  StreamValuePattern val_pattern = 5;
  StaticNotStreamReason not_stream_reason = 6;
  uint32 loop_possible_path = 7;
  uint32 config_loop_possible_path = 8;
  IVPattern iv_pattern = 9;
  ManualFloatType float_manual = 10;
  StreamParam const_update_param = 14;
  bool is_cond_access = 15; // Whether this is conditional access.
  bool is_trip_count_fixed = 16; // Whether the trip count is known at configure time.
  bool has_max_trip_count = 17;  // Whether the max trip count is known, (but breakable).
  repeated PredicatedStreamId predicated_streams = 18; // Predicated streams.
  repeated PredicatedStreamId merged_predicated_streams = 19; // Merged predicated streams.
  bool is_merged_predicated_stream = 20; // This predicated stream has been merged.
  repeated ExecFuncInfo pred_func_info = 21;
  bool no_core_user = 22; // This stream has not core user.

  /**
   * Top loop has level 0.
   */
  uint32 loop_level = 23; 
  uint32 config_loop_level = 24;
  bool is_inner_most_loop = 25;

  // AliasedStreamInfo
  StreamId alias_base_stream = 32;
  uint32 alias_offset = 33;
  repeated StreamId aliased_streams = 34;

  // Stream Compute extension.
  StaticStreamComputeInfo compute_info = 35;

  // Loop Eliminated.
  bool loop_eliminated = 36;

  // Need final value (e.g. loop ends).
  bool core_need_final_value = 37;

  // Need second final value (e.g. IV).
  bool core_need_second_final_value = 38;

  int32 core_element_size = 60;
  int32 mem_element_size = 61;
  // Optional data type for debug purpose.
  DataType core_element_type = 62;
  DataType mem_element_type = 63;

  repeated string user_param = 64;

  // User specified strand split loop level (outer-most: 0).
  repeated int32 user_strand_split_loop_level = 65;

  // User want to spatially pin the offloaded stream
  bool user_spatial_pin = 66;

  // User specified bypass cache level
  repeated string user_bypass_level = 67;

  // User specified reuse at each cache level
  repeated string user_reuse = 68;

  enum StaticNotStreamReason {
    UNKNOWN = 0;
    // Not Candidate Reason.
    BASE_STREAM_INNER_MOST_LOOP_NOT_CONTAIN_MINE = 1;
    MULTI_PHIMNODE_FOR_COMPUTEMNODE = 2;
    MULTI_NON_EMPTY_COMPUTE_PATH = 3;
    NO_NON_EMPTY_COMPUTE_PATH = 4;
    NOT_SCEVABLE_COMPUTEMNODE = 5;
    RANDOM_PATTERN = 6;
    MULTI_STEP_ROOT = 7;
    NO_STEP_ROOT = 8;
    VARIANT_BACKEDGE_TAKEN = 9;
    IS_UPDATE_STORE = 10;
    IN_LOOP_REMAINDER_OR_EPILOGUE = 11;
    IV_NO_MEM_DEPENDENT = 12;
    USER_NOT_OUT_MOST = 13;
    IN_LOOP_REDUCTION_USER = 14;
    USER_NEST_LOOP_LEVEL = 15;
    USER_NO_STREAM = 16;
    // Not Qualified Reason.
    BASE_STREAM_NOT_QUALIFIED = 20;
    NO_STATIC_MAPPING = 21;
  }

  enum ManualFloatType {
    RUNTIME = 0;
    FLOAT = 1;
    NOT_FLOAT = 2;
  }
}

message DynamicStreamInfo {
  bool is_candidate = 1;
  bool is_qualified = 2;
  bool is_chosen = 3;
  bool is_aliased = 4;
  uint64 total_iters = 5;
  uint64 total_accesses = 6;
  uint64 total_configures = 7;
}

message StreamInfo {
  string name = 1;
  uint64 id = 2;
  Type type = 3;
  string pattern_path = 7;
  string history_path = 8;
  StaticCoalesceInfo coalesce_info = 9;

  DynamicStreamInfo dynamic_info = 10;
  int32 region_stream_id = 11;
  ExecFuncInfo addr_func_info = 12;

  repeated StreamId base_streams = 16;
  repeated StreamId back_base_streams = 17;
  repeated StreamId chosen_base_streams = 18;
  repeated StreamId chosen_back_base_streams = 19;

  // Mark if this is stream is statically qualifed without any dynamic
  // information.
  StaticStreamInfo static_info = 24;

  enum Type {
    IV = 0;
    LD = 1;
    ST = 2;
    AT = 3;
  }
}

// Defines the reserved RegionStreamId used for nest config input.
enum ReservedStreamRegionId {
  InvalidRegionId = 0;
  NestConfigureFuncInputRegionId = 1;
  LoopBoundFuncInputRegionId = 2;
  NumReservedStreamRegionId = 3;
}

message StreamRegion {
  string region = 1;
  string relative_path = 2;
  // How many streams may coexist with this region (including
  // parent/sub-region).
  int32 total_alive_streams = 3;
  int32 total_alive_coalesced_streams = 4;
  repeated StreamInfo streams = 8;
  repeated uint64 coalesced_stream_ids = 9;
  repeated string nest_region_relative_paths = 10;
  ExecFuncInfo nest_config_func = 11;
  ExecFuncInfo nest_pred_func = 12;
  bool nest_pred_ret = 13;
  bool is_nest = 14;
  // Break out when func() == ret.
  ExecFuncInfo loop_bound_func = 15;
  bool loop_bound_ret = 16;
  bool is_loop_bound = 17;
  bool loop_eliminated = 18;
}

// All the configured stream region in one place.
message AllStreamRegions {
  string binary = 1;
  repeated string relative_paths = 2;
};

message StreamPattern {
  // Describe the pattern of the a dynamic direct stream.
  string val_pattern = 1;
  string acc_pattern = 2;
  uint64 iters = 3;
  uint64 accesses = 4;
  uint64 updates = 5;
  uint64 base = 6;
  int64 stride_i = 7;
  uint64 ni = 8;
  int64 stride_j = 9;
  repeated HistoryEntry history = 10;

  message HistoryEntry {
    bool valid = 1;
    uint64 value = 2;
  }
}

message StreamHistory {
  // Describe the accessed entries of the a dynamic stream.
  message HistoryEntry {
    bool valid = 1;
    uint64 addr = 2;
    bool used = 3;
  }
  uint64 id = 1;
  repeated HistoryEntry history = 2;
  uint64 num_cache_lines = 3;
  uint64 num_accesses = 4;
}

message StreamFloatEvent {
  uint64 cycle = 1;
  uint32 llc_bank = 2;
  StreamFloatEventType type = 3;
  StreamEngineType se = 4;

  enum StreamEngineType {
    CORE = 0;
    MLC = 1;
    LLC = 2;
    MEM = 3;
  }
  
  enum StreamFloatEventType {
    // Per stream event.
    CONFIG = 0;
    END = 1;
    MIGRATE_IN = 2;
    MIGRATE_OUT = 3;
    ISSUE = 4;
    // Per stream engine event.
    CMP_START = 5;
    CMP_DONE = 6;
    LOCAL_REQ_START = 7;
    LOCAL_REQ_DONE = 8;
    // Router event.
    ROUTER_XBAR_OUT_LOCAL_START = 9;
    ROUTER_XBAR_OUT_LOCAL_DONE = 10;
    ROUTER_XBAR_OUT_NORTH_START = 11;
    ROUTER_XBAR_OUT_NORTH_DONE = 12;
    ROUTER_XBAR_OUT_SOUTH_START = 13;
    ROUTER_XBAR_OUT_SOUTH_DONE = 14;
    ROUTER_XBAR_OUT_EAST_START = 15;
    ROUTER_XBAR_OUT_EAST_DONE = 16;
    ROUTER_XBAR_OUT_WEST_START = 17;
    ROUTER_XBAR_OUT_WEST_DONE = 18;
  }
}